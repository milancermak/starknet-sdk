/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Switchboard {
  export type ResultStruct = {
    value: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    oracleAddress: PromiseOrValue<string>;
  };

  export type ResultStructOutput = [BigNumber, BigNumber, string] & {
    value: BigNumber;
    timestamp: BigNumber;
    oracleAddress: string;
  };
}

export interface SwitchboardInterface extends utils.Interface {
  functions: {
    "aggregatorExists(address)": FunctionFragment;
    "aggregatorReadConfigs(address)": FunctionFragment;
    "aggregatorResults(address,uint256)": FunctionFragment;
    "aggregators(address)": FunctionFragment;
    "authority()": FunctionFragment;
    "containsAddress(address[],address)": FunctionFragment;
    "createAggregator(address,string,address,uint256,uint256,uint256,string,address,uint256,uint256,uint256)": FunctionFragment;
    "createOracle(address,string,address,address)": FunctionFragment;
    "createOracleQueue(address,string,address,bool,uint256,uint256,uint256)": FunctionFragment;
    "escrowFund(address)": FunctionFragment;
    "escrowWithdraw(address,address,uint256)": FunctionFragment;
    "getMedian((int256,uint256,address)[])": FunctionFragment;
    "getOracleIdx(address)": FunctionFragment;
    "heartbeat(address)": FunctionFragment;
    "latestResult(address)": FunctionFragment;
    "oracleExists(address)": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "queueExists(address)": FunctionFragment;
    "queues(address)": FunctionFragment;
    "saveResults(address[],int256[],address,uint256)": FunctionFragment;
    "setAggregatorConfig(address,string,address,uint256,uint256,uint256,string,address)": FunctionFragment;
    "setAggregatorPermission(address,address,bool)": FunctionFragment;
    "setAggregatorReadConfig(address,uint256,address,address[],bool)": FunctionFragment;
    "setAggregatorResponseConfig(address,uint256,uint256,uint256)": FunctionFragment;
    "setOracleConfig(address,string,address,address)": FunctionFragment;
    "setOraclePermission(address,address,bool)": FunctionFragment;
    "setQueueConfig(address,string,address,bool,uint256,uint256,uint256)": FunctionFragment;
    "sortResults((int256,uint256,address)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregatorExists"
      | "aggregatorReadConfigs"
      | "aggregatorResults"
      | "aggregators"
      | "authority"
      | "containsAddress"
      | "createAggregator"
      | "createOracle"
      | "createOracleQueue"
      | "escrowFund"
      | "escrowWithdraw"
      | "getMedian"
      | "getOracleIdx"
      | "heartbeat"
      | "latestResult"
      | "oracleExists"
      | "oracles"
      | "queueExists"
      | "queues"
      | "saveResults"
      | "setAggregatorConfig"
      | "setAggregatorPermission"
      | "setAggregatorReadConfig"
      | "setAggregatorResponseConfig"
      | "setOracleConfig"
      | "setOraclePermission"
      | "setQueueConfig"
      | "sortResults"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregatorExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorReadConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorResults",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "containsAddress",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAggregator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOracle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOracleQueue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMedian",
    values: [Switchboard.ResultStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleIdx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "heartbeat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestResult",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveResults",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregatorConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregatorPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregatorReadConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregatorResponseConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOraclePermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setQueueConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sortResults",
    values: [Switchboard.ResultStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregatorExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorReadConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "containsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOracleQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrowFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMedian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOracleIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heartbeat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAggregatorConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAggregatorPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAggregatorReadConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAggregatorResponseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOraclePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQueueConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortResults",
    data: BytesLike
  ): Result;

  events: {
    "AggregatorAccountInit(address,address,uint256)": EventFragment;
    "AggregatorFundEvent(address,address,uint256)": EventFragment;
    "AggregatorResponseSettingsUpdate(address,uint256,uint256,uint256)": EventFragment;
    "AggregatorSaveResult(address,address,int256)": EventFragment;
    "AggregatorUpdate(address,int256,uint256)": EventFragment;
    "OracleAccountInit(address,address)": EventFragment;
    "OracleGC(address,address)": EventFragment;
    "OracleHeartbeat(address,address)": EventFragment;
    "OraclePayoutEvent(address,address,uint256)": EventFragment;
    "OracleQueueAccountInit(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorFundEvent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AggregatorResponseSettingsUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorSaveResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleGC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleHeartbeat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OraclePayoutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleQueueAccountInit"): EventFragment;
}

export interface AggregatorAccountInitEventObject {
  authority: string;
  accountAddress: string;
  timestamp: BigNumber;
}
export type AggregatorAccountInitEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorAccountInitEventObject
>;

export type AggregatorAccountInitEventFilter =
  TypedEventFilter<AggregatorAccountInitEvent>;

export interface AggregatorFundEventEventObject {
  aggregatorAddress: string;
  funder: string;
  amount: BigNumber;
}
export type AggregatorFundEventEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorFundEventEventObject
>;

export type AggregatorFundEventEventFilter =
  TypedEventFilter<AggregatorFundEventEvent>;

export interface AggregatorResponseSettingsUpdateEventObject {
  aggregatorAddress: string;
  varianceThreshold: BigNumber;
  minJobResults: BigNumber;
  forceReportPeriod: BigNumber;
}
export type AggregatorResponseSettingsUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AggregatorResponseSettingsUpdateEventObject
>;

export type AggregatorResponseSettingsUpdateEventFilter =
  TypedEventFilter<AggregatorResponseSettingsUpdateEvent>;

export interface AggregatorSaveResultEventObject {
  aggregatorAddress: string;
  oracle: string;
  value: BigNumber;
}
export type AggregatorSaveResultEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorSaveResultEventObject
>;

export type AggregatorSaveResultEventFilter =
  TypedEventFilter<AggregatorSaveResultEvent>;

export interface AggregatorUpdateEventObject {
  aggregatorAddress: string;
  value: BigNumber;
  timestamp: BigNumber;
}
export type AggregatorUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AggregatorUpdateEventObject
>;

export type AggregatorUpdateEventFilter =
  TypedEventFilter<AggregatorUpdateEvent>;

export interface OracleAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type OracleAccountInitEvent = TypedEvent<
  [string, string],
  OracleAccountInitEventObject
>;

export type OracleAccountInitEventFilter =
  TypedEventFilter<OracleAccountInitEvent>;

export interface OracleGCEventObject {
  oracleAddress: string;
  queue: string;
}
export type OracleGCEvent = TypedEvent<[string, string], OracleGCEventObject>;

export type OracleGCEventFilter = TypedEventFilter<OracleGCEvent>;

export interface OracleHeartbeatEventObject {
  oracleAddress: string;
  authority: string;
}
export type OracleHeartbeatEvent = TypedEvent<
  [string, string],
  OracleHeartbeatEventObject
>;

export type OracleHeartbeatEventFilter = TypedEventFilter<OracleHeartbeatEvent>;

export interface OraclePayoutEventEventObject {
  oracleAddress: string;
  aggregatorAddress: string;
  amount: BigNumber;
}
export type OraclePayoutEventEvent = TypedEvent<
  [string, string, BigNumber],
  OraclePayoutEventEventObject
>;

export type OraclePayoutEventEventFilter =
  TypedEventFilter<OraclePayoutEventEvent>;

export interface OracleQueueAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type OracleQueueAccountInitEvent = TypedEvent<
  [string, string],
  OracleQueueAccountInitEventObject
>;

export type OracleQueueAccountInitEventFilter =
  TypedEventFilter<OracleQueueAccountInitEvent>;

export interface Switchboard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwitchboardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregatorExists(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    aggregatorReadConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean] & {
        readCharge: BigNumber;
        rewardEscrow: string;
        limitReadsToWhitelist: boolean;
      }
    >;

    aggregatorResults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        value: BigNumber;
        timestamp: BigNumber;
        oracleAddress: string;
      }
    >;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        Switchboard.ResultStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        authority: string;
        latestResult: Switchboard.ResultStructOutput;
        batchSize: BigNumber;
        minUpdateDelaySeconds: BigNumber;
        minOracleResults: BigNumber;
        jobsHash: string;
        queueAddress: string;
        balanceLeftForInterval: BigNumber;
        nextIntervalRefreshTime: BigNumber;
        balance: BigNumber;
      }
    >;

    authority(overrides?: CallOverrides): Promise<[string]>;

    containsAddress(
      arr: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createAggregator(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOracle(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOracleQueue(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowFund(
      accountAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMedian(
      arr: Switchboard.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOracleIdx(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    heartbeat(
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestResult(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleExists(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, string] & {
        name: string;
        authority: string;
        numRows: number;
        lastHeartbeat: BigNumber;
        queueAddress: string;
      }
    >;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        authority: string;
        unpermissionedFeedsEnabled: boolean;
        maxSize: BigNumber;
        reward: BigNumber;
        size: BigNumber;
        oracleTimeout: BigNumber;
        gcIdx: BigNumber;
        currIdx: BigNumber;
      }
    >;

    saveResults(
      aggregatorAddresses: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueAddress: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAggregatorConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAggregatorPermission(
      queueAddress: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAggregatorReadConfig(
      aggregatorAddress: PromiseOrValue<string>,
      readCharge: PromiseOrValue<BigNumberish>,
      rewardEscrow: PromiseOrValue<string>,
      readWhiteList: PromiseOrValue<string>[],
      limitReadsToWhitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAggregatorResponseConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleConfig(
      _oracleAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOraclePermission(
      queueAddress: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sortResults(
      input: Switchboard.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<[Switchboard.ResultStructOutput[]]>;
  };

  aggregatorExists(
    aggregatorAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  aggregatorReadConfigs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean] & {
      readCharge: BigNumber;
      rewardEscrow: string;
      limitReadsToWhitelist: boolean;
    }
  >;

  aggregatorResults(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      value: BigNumber;
      timestamp: BigNumber;
      oracleAddress: string;
    }
  >;

  aggregators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      Switchboard.ResultStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      authority: string;
      latestResult: Switchboard.ResultStructOutput;
      batchSize: BigNumber;
      minUpdateDelaySeconds: BigNumber;
      minOracleResults: BigNumber;
      jobsHash: string;
      queueAddress: string;
      balanceLeftForInterval: BigNumber;
      nextIntervalRefreshTime: BigNumber;
      balance: BigNumber;
    }
  >;

  authority(overrides?: CallOverrides): Promise<string>;

  containsAddress(
    arr: PromiseOrValue<string>[],
    value: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createAggregator(
    _accountAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _batchSize: PromiseOrValue<BigNumberish>,
    _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
    _minOracleResults: PromiseOrValue<BigNumberish>,
    _jobsHash: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    varianceThreshold: PromiseOrValue<BigNumberish>,
    minJobResults: PromiseOrValue<BigNumberish>,
    forceReportPeriod: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOracle(
    _accountAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOracleQueue(
    _accountAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
    _maxSize: PromiseOrValue<BigNumberish>,
    _reward: PromiseOrValue<BigNumberish>,
    _oracleTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowFund(
    accountAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowWithdraw(
    recipient: PromiseOrValue<string>,
    aggregatorAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMedian(
    arr: Switchboard.ResultStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleIdx(
    oracleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  heartbeat(
    oracleAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestResult(
    aggregatorAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleExists(
    oracleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber, string] & {
      name: string;
      authority: string;
      numRows: number;
      lastHeartbeat: BigNumber;
      queueAddress: string;
    }
  >;

  queueExists(
    queueAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queues(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      authority: string;
      unpermissionedFeedsEnabled: boolean;
      maxSize: BigNumber;
      reward: BigNumber;
      size: BigNumber;
      oracleTimeout: BigNumber;
      gcIdx: BigNumber;
      currIdx: BigNumber;
    }
  >;

  saveResults(
    aggregatorAddresses: PromiseOrValue<string>[],
    results: PromiseOrValue<BigNumberish>[],
    queueAddress: PromiseOrValue<string>,
    oracleIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAggregatorConfig(
    _aggregatorAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _batchSize: PromiseOrValue<BigNumberish>,
    _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
    _minOracleResults: PromiseOrValue<BigNumberish>,
    _jobsHash: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAggregatorPermission(
    queueAddress: PromiseOrValue<string>,
    aggregatorAddress: PromiseOrValue<string>,
    on: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAggregatorReadConfig(
    aggregatorAddress: PromiseOrValue<string>,
    readCharge: PromiseOrValue<BigNumberish>,
    rewardEscrow: PromiseOrValue<string>,
    readWhiteList: PromiseOrValue<string>[],
    limitReadsToWhitelist: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAggregatorResponseConfig(
    _aggregatorAddress: PromiseOrValue<string>,
    varianceThreshold: PromiseOrValue<BigNumberish>,
    minJobResults: PromiseOrValue<BigNumberish>,
    forceReportPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleConfig(
    _oracleAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOraclePermission(
    queueAddress: PromiseOrValue<string>,
    oracleAddress: PromiseOrValue<string>,
    on: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQueueConfig(
    _queueAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
    _maxSize: PromiseOrValue<BigNumberish>,
    _reward: PromiseOrValue<BigNumberish>,
    _oracleTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sortResults(
    input: Switchboard.ResultStruct[],
    overrides?: CallOverrides
  ): Promise<Switchboard.ResultStructOutput[]>;

  callStatic: {
    aggregatorExists(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    aggregatorReadConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean] & {
        readCharge: BigNumber;
        rewardEscrow: string;
        limitReadsToWhitelist: boolean;
      }
    >;

    aggregatorResults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        value: BigNumber;
        timestamp: BigNumber;
        oracleAddress: string;
      }
    >;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        Switchboard.ResultStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        authority: string;
        latestResult: Switchboard.ResultStructOutput;
        batchSize: BigNumber;
        minUpdateDelaySeconds: BigNumber;
        minOracleResults: BigNumber;
        jobsHash: string;
        queueAddress: string;
        balanceLeftForInterval: BigNumber;
        nextIntervalRefreshTime: BigNumber;
        balance: BigNumber;
      }
    >;

    authority(overrides?: CallOverrides): Promise<string>;

    containsAddress(
      arr: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAggregator(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOracle(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOracleQueue(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowFund(
      accountAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMedian(
      arr: Switchboard.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleIdx(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heartbeat(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    latestResult(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;

    oracleExists(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, string] & {
        name: string;
        authority: string;
        numRows: number;
        lastHeartbeat: BigNumber;
        queueAddress: string;
      }
    >;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        authority: string;
        unpermissionedFeedsEnabled: boolean;
        maxSize: BigNumber;
        reward: BigNumber;
        size: BigNumber;
        oracleTimeout: BigNumber;
        gcIdx: BigNumber;
        currIdx: BigNumber;
      }
    >;

    saveResults(
      aggregatorAddresses: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueAddress: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAggregatorConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAggregatorPermission(
      queueAddress: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      on: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAggregatorReadConfig(
      aggregatorAddress: PromiseOrValue<string>,
      readCharge: PromiseOrValue<BigNumberish>,
      rewardEscrow: PromiseOrValue<string>,
      readWhiteList: PromiseOrValue<string>[],
      limitReadsToWhitelist: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAggregatorResponseConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleConfig(
      _oracleAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOraclePermission(
      queueAddress: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      on: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sortResults(
      input: Switchboard.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<Switchboard.ResultStructOutput[]>;
  };

  filters: {
    "AggregatorAccountInit(address,address,uint256)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AggregatorAccountInitEventFilter;
    AggregatorAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AggregatorAccountInitEventFilter;

    "AggregatorFundEvent(address,address,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorFundEventEventFilter;
    AggregatorFundEvent(
      aggregatorAddress?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorFundEventEventFilter;

    "AggregatorResponseSettingsUpdate(address,uint256,uint256,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      varianceThreshold?: null,
      minJobResults?: null,
      forceReportPeriod?: null
    ): AggregatorResponseSettingsUpdateEventFilter;
    AggregatorResponseSettingsUpdate(
      aggregatorAddress?: PromiseOrValue<string> | null,
      varianceThreshold?: null,
      minJobResults?: null,
      forceReportPeriod?: null
    ): AggregatorResponseSettingsUpdateEventFilter;

    "AggregatorSaveResult(address,address,int256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): AggregatorSaveResultEventFilter;
    AggregatorSaveResult(
      aggregatorAddress?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): AggregatorSaveResultEventFilter;

    "AggregatorUpdate(address,int256,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): AggregatorUpdateEventFilter;
    AggregatorUpdate(
      aggregatorAddress?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): AggregatorUpdateEventFilter;

    "OracleAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleAccountInitEventFilter;
    OracleAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleAccountInitEventFilter;

    "OracleGC(address,address)"(
      oracleAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): OracleGCEventFilter;
    OracleGC(
      oracleAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): OracleGCEventFilter;

    "OracleHeartbeat(address,address)"(
      oracleAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): OracleHeartbeatEventFilter;
    OracleHeartbeat(
      oracleAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): OracleHeartbeatEventFilter;

    "OraclePayoutEvent(address,address,uint256)"(
      oracleAddress?: PromiseOrValue<string> | null,
      aggregatorAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OraclePayoutEventEventFilter;
    OraclePayoutEvent(
      oracleAddress?: PromiseOrValue<string> | null,
      aggregatorAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OraclePayoutEventEventFilter;

    "OracleQueueAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleQueueAccountInitEventFilter;
    OracleQueueAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleQueueAccountInitEventFilter;
  };

  estimateGas: {
    aggregatorExists(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregatorReadConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregatorResults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    containsAddress(
      arr: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAggregator(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOracle(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOracleQueue(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowFund(
      accountAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMedian(
      arr: Switchboard.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleIdx(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heartbeat(
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestResult(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleExists(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saveResults(
      aggregatorAddresses: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueAddress: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAggregatorConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAggregatorPermission(
      queueAddress: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAggregatorReadConfig(
      aggregatorAddress: PromiseOrValue<string>,
      readCharge: PromiseOrValue<BigNumberish>,
      rewardEscrow: PromiseOrValue<string>,
      readWhiteList: PromiseOrValue<string>[],
      limitReadsToWhitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAggregatorResponseConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleConfig(
      _oracleAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOraclePermission(
      queueAddress: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sortResults(
      input: Switchboard.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregatorExists(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregatorReadConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregatorResults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    containsAddress(
      arr: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAggregator(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOracle(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOracleQueue(
      _accountAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowFund(
      accountAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMedian(
      arr: Switchboard.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleIdx(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heartbeat(
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestResult(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleExists(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saveResults(
      aggregatorAddresses: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueAddress: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAggregatorConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAggregatorPermission(
      queueAddress: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAggregatorReadConfig(
      aggregatorAddress: PromiseOrValue<string>,
      readCharge: PromiseOrValue<BigNumberish>,
      rewardEscrow: PromiseOrValue<string>,
      readWhiteList: PromiseOrValue<string>[],
      limitReadsToWhitelist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAggregatorResponseConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleConfig(
      _oracleAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOraclePermission(
      queueAddress: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sortResults(
      input: Switchboard.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
