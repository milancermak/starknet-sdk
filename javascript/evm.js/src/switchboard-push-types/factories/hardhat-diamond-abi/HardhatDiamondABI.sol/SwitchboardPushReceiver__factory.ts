/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  SwitchboardPushReceiver,
  SwitchboardPushReceiverInterface,
} from "../../../hardhat-diamond-abi/HardhatDiamondABI.sol/SwitchboardPushReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "feedId",
        type: "address",
      },
    ],
    name: "FeedUninitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectInputLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
      {
        internalType: "address",
        name: "received",
        type: "address",
      },
    ],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_feedNames",
        type: "bytes32[]",
      },
      {
        internalType: "int256[]",
        name: "values",
        type: "int256[]",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "callback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feedId",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "deployFeedAdapter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "feedNames",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "feedName",
        type: "bytes32",
      },
    ],
    name: "feeds",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "feedId",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "feedName",
            type: "bytes32",
          },
          {
            internalType: "uint80",
            name: "latestIntervalId",
            type: "uint80",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "value",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "startedAt",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "updatedAt",
                type: "uint256",
              },
            ],
            internalType: "struct ReceiverLib.Result",
            name: "latestResult",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "historyEnabled",
            type: "bool",
          },
        ],
        internalType: "struct ReceiverLib.Feed",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllFeeds",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "feedId",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "feedName",
            type: "bytes32",
          },
          {
            internalType: "uint80",
            name: "latestIntervalId",
            type: "uint80",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "value",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "startedAt",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "updatedAt",
                type: "uint256",
              },
            ],
            internalType: "struct ReceiverLib.Result",
            name: "latestResult",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "historyEnabled",
            type: "bool",
          },
        ],
        internalType: "struct ReceiverLib.Feed[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feedId",
        type: "address",
      },
    ],
    name: "getLatestResult",
    outputs: [
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "intervalId",
        type: "uint80",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "feedName",
        type: "bytes32",
      },
      {
        internalType: "uint80",
        name: "intervalId",
        type: "uint80",
      },
    ],
    name: "results",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "startedAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedAt",
            type: "uint256",
          },
        ],
        internalType: "struct ReceiverLib.Result",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initializationContractAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "InitializationFunctionReverted",
    type: "error",
  },
  {
    inputs: [],
    name: "ACLAdminAlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "functionId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_switchboard",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setAllowed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_functionId",
        type: "address",
      },
    ],
    name: "setFunctionId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_switchboard",
        type: "address",
      },
    ],
    name: "setSwitchboard",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "switchboard",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "callFunction",
    outputs: [
      {
        internalType: "address",
        name: "callId",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class SwitchboardPushReceiver__factory {
  static readonly abi = _abi;
  static createInterface(): SwitchboardPushReceiverInterface {
    return new utils.Interface(_abi) as SwitchboardPushReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwitchboardPushReceiver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SwitchboardPushReceiver;
  }
}
