/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  LegacyOracleAdapter,
  LegacyOracleAdapterInterface,
} from "../../../../../contracts/Switchboard/adapters/LegacyOracleAdapterV3.sol/LegacyOracleAdapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_switchboard",
        type: "address",
      },
      {
        internalType: "address",
        name: "_aggregatorAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "aggregatorAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "switchboard",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107c43803806107c483398101604081905261002f916100a6565b600180546001600160a01b038086166001600160a01b0319928316179092556002805492851692909116919091179055600061006b8282610219565b505050506102d8565b80516001600160a01b038116811461008b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156100bb57600080fd5b6100c484610074565b925060206100d3818601610074565b60408601519093506001600160401b03808211156100f057600080fd5b818701915087601f83011261010457600080fd5b81518181111561011657610116610090565b604051601f8201601f19908116603f0116810190838211818310171561013e5761013e610090565b816040528281528a8684870101111561015657600080fd5b600093505b82841015610178578484018601518185018701529285019261015b565b60008684830101528096505050505050509250925092565b600181811c908216806101a457607f821691505b6020821081036101c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561021457600081815260208120601f850160051c810160208610156101f15750805b601f850160051c820191505b81811015610210578281556001016101fd565b5050505b505050565b81516001600160401b0381111561023257610232610090565b610246816102408454610190565b846101ca565b602080601f83116001811461027b57600084156102635750858301515b600019600386901b1c1916600185901b178555610210565b600085815260208120601f198616915b828110156102aa5788860151825594840194600190910190840161028b565b50858210156102c85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6104dd806102e76000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806354fd4d501161005b57806354fd4d50146100df5780637284e416146100f55780639a6fc8f51461010a578063feaf968c1461015457600080fd5b806318ccf09914610082578063313ce567146100b2578063380bbe53146100cc575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ba601281565b60405160ff90911681526020016100a9565b600254610095906001600160a01b031681565b6100e7600181565b6040519081526020016100a9565b6100fd61015c565b6040516100a99190610395565b61011d6101183660046103fe565b6101ea565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100a9565b61011d610287565b6000805461016990610422565b80601f016020809104026020016040519081016040528092919081815260200182805461019590610422565b80156101e25780601f106101b7576101008083540402835291602001916101e2565b820191906000526020600020905b8154815290600101906020018083116101c557829003601f168201915b505050505081565b600154600254604051631e9277b760e11b81526001600160a01b03918216600482015269ffffffffffffffffffff8416602482015260009283928392839283921690633d24ef6e90604401606060405180830381865afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610276919061045c565b979891979096509450879350915050565b600154600254604051630ee0ed4360e11b81526001600160a01b03918216600482015260009283928392839283921690631dc1da8690602401602060405180830381865afa1580156102dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610301919061048a565b600154600254604051631e9277b760e11b81526001600160a01b03918216600482015269ffffffffffffffffffff841660248201529297501690633d24ef6e90604401606060405180830381865afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610385919061045c565b9697919690955093508692509050565b600060208083528351808285015260005b818110156103c2578581018301518582016040015282016103a6565b506000604082860101526040601f19601f8301168501019250505092915050565b69ffffffffffffffffffff811681146103fb57600080fd5b50565b60006020828403121561041057600080fd5b813561041b816103e3565b9392505050565b600181811c9082168061043657607f821691505b60208210810361045657634e487b7160e01b600052602260045260246000fd5b50919050565b60008060006060848603121561047157600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561049c57600080fd5b815161041b816103e356fea26469706673582212200eb0a964d2ded7cc6a1abf6a4adf7a18532877a3471250e70515630f6591b39a64736f6c63430008110033";

type LegacyOracleAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LegacyOracleAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LegacyOracleAdapter__factory extends ContractFactory {
  constructor(...args: LegacyOracleAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _switchboard: PromiseOrValue<string>,
    _aggregatorAddress: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LegacyOracleAdapter> {
    return super.deploy(
      _switchboard,
      _aggregatorAddress,
      _description,
      overrides || {}
    ) as Promise<LegacyOracleAdapter>;
  }
  override getDeployTransaction(
    _switchboard: PromiseOrValue<string>,
    _aggregatorAddress: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _switchboard,
      _aggregatorAddress,
      _description,
      overrides || {}
    );
  }
  override attach(address: string): LegacyOracleAdapter {
    return super.attach(address) as LegacyOracleAdapter;
  }
  override connect(signer: Signer): LegacyOracleAdapter__factory {
    return super.connect(signer) as LegacyOracleAdapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LegacyOracleAdapterInterface {
    return new utils.Interface(_abi) as LegacyOracleAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LegacyOracleAdapter {
    return new Contract(address, _abi, signerOrProvider) as LegacyOracleAdapter;
  }
}
