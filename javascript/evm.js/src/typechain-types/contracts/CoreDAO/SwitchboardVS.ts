/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SwitchboardVSInterface extends utils.Interface {
  functions: {
    "HEARTBEAT_PERMISSION()": FunctionFragment;
    "SERVICE_QUEUE_PERMISSION()": FunctionFragment;
    "USAGE_PERMISSION()": FunctionFragment;
    "addMrEnclave(address,bytes32)": FunctionFragment;
    "createNode(address,address,address)": FunctionFragment;
    "createServiceQueue(address,uint256,uint256,uint256,uint256,uint256,bool,bool,address,bool)": FunctionFragment;
    "failQuote(address,address,uint256)": FunctionFragment;
    "forceOverrideVerify(address,address)": FunctionFragment;
    "generateAddress()": FunctionFragment;
    "getNodeIdx(address)": FunctionFragment;
    "hasPermission(address,address,uint256)": FunctionFragment;
    "heartbeat(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "nodeAuthorityToQuoteAddress(address)": FunctionFragment;
    "nodeExists(address)": FunctionFragment;
    "nodes(address)": FunctionFragment;
    "oracleQueueSettings(address)": FunctionFragment;
    "permissions(address,address)": FunctionFragment;
    "queueExists(address)": FunctionFragment;
    "queues(address)": FunctionFragment;
    "quoteExists(address)": FunctionFragment;
    "quotes(address)": FunctionFragment;
    "removeMrEnclave(address,bytes32)": FunctionFragment;
    "setPermission(address,address,uint256,bool)": FunctionFragment;
    "setQueueConfig(address,address,uint256,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "updateQuote(address,address,bytes)": FunctionFragment;
    "validate(address,address)": FunctionFragment;
    "verifyQuote(address,address,uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HEARTBEAT_PERMISSION"
      | "SERVICE_QUEUE_PERMISSION"
      | "USAGE_PERMISSION"
      | "addMrEnclave"
      | "createNode"
      | "createServiceQueue"
      | "failQuote"
      | "forceOverrideVerify"
      | "generateAddress"
      | "getNodeIdx"
      | "hasPermission"
      | "heartbeat"
      | "initialize"
      | "nodeAuthorityToQuoteAddress"
      | "nodeExists"
      | "nodes"
      | "oracleQueueSettings"
      | "permissions"
      | "queueExists"
      | "queues"
      | "quoteExists"
      | "quotes"
      | "removeMrEnclave"
      | "setPermission"
      | "setQueueConfig"
      | "updateQuote"
      | "validate"
      | "verifyQuote"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HEARTBEAT_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SERVICE_QUEUE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USAGE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMrEnclave",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNode",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createServiceQueue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "failQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forceOverrideVerify",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeIdx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "heartbeat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeAuthorityToQuoteAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nodes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleQueueSettings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMrEnclave",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setQueueConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "HEARTBEAT_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SERVICE_QUEUE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USAGE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMrEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createServiceQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceOverrideVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNodeIdx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heartbeat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeAuthorityToQuoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodeExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleQueueSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMrEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQueueConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NodeAccountInit(address,address)": EventFragment;
    "NodeGC(address,address)": EventFragment;
    "NodeHeartbeat(address,address)": EventFragment;
    "NodePayoutEvent(address,address,uint256)": EventFragment;
    "QuoteVerifyRequest(address,address,address)": EventFragment;
    "ServiceQueueAccountInit(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeGC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeHeartbeat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodePayoutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteVerifyRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceQueueAccountInit"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NodeAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type NodeAccountInitEvent = TypedEvent<
  [string, string],
  NodeAccountInitEventObject
>;

export type NodeAccountInitEventFilter = TypedEventFilter<NodeAccountInitEvent>;

export interface NodeGCEventObject {
  nodeAddress: string;
  queue: string;
}
export type NodeGCEvent = TypedEvent<[string, string], NodeGCEventObject>;

export type NodeGCEventFilter = TypedEventFilter<NodeGCEvent>;

export interface NodeHeartbeatEventObject {
  nodeAddress: string;
  authority: string;
}
export type NodeHeartbeatEvent = TypedEvent<
  [string, string],
  NodeHeartbeatEventObject
>;

export type NodeHeartbeatEventFilter = TypedEventFilter<NodeHeartbeatEvent>;

export interface NodePayoutEventEventObject {
  nodeAddress: string;
  quoteAddress: string;
  amount: BigNumber;
}
export type NodePayoutEventEvent = TypedEvent<
  [string, string, BigNumber],
  NodePayoutEventEventObject
>;

export type NodePayoutEventEventFilter = TypedEventFilter<NodePayoutEventEvent>;

export interface QuoteVerifyRequestEventObject {
  queueAddress: string;
  verifier: string;
  verifiee: string;
}
export type QuoteVerifyRequestEvent = TypedEvent<
  [string, string, string],
  QuoteVerifyRequestEventObject
>;

export type QuoteVerifyRequestEventFilter =
  TypedEventFilter<QuoteVerifyRequestEvent>;

export interface ServiceQueueAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type ServiceQueueAccountInitEvent = TypedEvent<
  [string, string],
  ServiceQueueAccountInitEventObject
>;

export type ServiceQueueAccountInitEventFilter =
  TypedEventFilter<ServiceQueueAccountInitEvent>;

export interface SwitchboardVS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwitchboardVSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HEARTBEAT_PERMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    SERVICE_QUEUE_PERMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USAGE_PERMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNode(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createServiceQueue(
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _nodeTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      _verifierQueueAddress: PromiseOrValue<string>,
      _enableContentHash: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    failQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      nodeIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceOverrideVerify(
      _queue: PromiseOrValue<string>,
      _node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNodeIdx(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    heartbeat(
      nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _switchboard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nodeAuthorityToQuoteAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nodeExists(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, string, string] & {
        authority: string;
        numRows: number;
        lastHeartbeat: BigNumber;
        queueAddress: string;
        owner: string;
      }
    >;

    oracleQueueSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { v3Enabled: boolean; serviceQueue: string }
    >;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        authority: string;
        maxSize: BigNumber;
        reward: BigNumber;
        lastHeartbeat: BigNumber;
        maxQuoteVerificationAge: BigNumber;
        allowAuthorityOverrideAfter: BigNumber;
        requireAuthorityHeartbeatPermission: boolean;
        requireUsagePermissions: boolean;
        enableContentHash: boolean;
        verifierQueueAddress: string;
        nodeTimeout: BigNumber;
        gcIdx: BigNumber;
        currIdx: BigNumber;
      }
    >;

    quoteExists(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    quotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, BigNumber] & {
        queueAddress: string;
        authority: string;
        quoteBuffer: string;
        verificationStatus: number;
        verificationTimestamp: BigNumber;
        validUntil: BigNumber;
      }
    >;

    removeMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _nodeTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validate(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      nodeIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  HEARTBEAT_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  SERVICE_QUEUE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  USAGE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  addMrEnclave(
    queueAddress: PromiseOrValue<string>,
    mrEnclave: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNode(
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createServiceQueue(
    _authority: PromiseOrValue<string>,
    _maxSize: PromiseOrValue<BigNumberish>,
    _reward: PromiseOrValue<BigNumberish>,
    _nodeTimeout: PromiseOrValue<BigNumberish>,
    _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
    _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
    _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
    _requireUsagePermissions: PromiseOrValue<boolean>,
    _verifierQueueAddress: PromiseOrValue<string>,
    _enableContentHash: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  failQuote(
    verifierAddress: PromiseOrValue<string>,
    quoteAddress: PromiseOrValue<string>,
    nodeIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceOverrideVerify(
    _queue: PromiseOrValue<string>,
    _node: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNodeIdx(
    nodeAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasPermission(
    granter: PromiseOrValue<string>,
    grantee: PromiseOrValue<string>,
    permission: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  heartbeat(
    nodeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _switchboard: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nodeAuthorityToQuoteAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  nodeExists(
    nodeAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nodes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, string, string] & {
      authority: string;
      numRows: number;
      lastHeartbeat: BigNumber;
      queueAddress: string;
      owner: string;
    }
  >;

  oracleQueueSettings(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { v3Enabled: boolean; serviceQueue: string }>;

  permissions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queueExists(
    queueAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queues(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      authority: string;
      maxSize: BigNumber;
      reward: BigNumber;
      lastHeartbeat: BigNumber;
      maxQuoteVerificationAge: BigNumber;
      allowAuthorityOverrideAfter: BigNumber;
      requireAuthorityHeartbeatPermission: boolean;
      requireUsagePermissions: boolean;
      enableContentHash: boolean;
      verifierQueueAddress: string;
      nodeTimeout: BigNumber;
      gcIdx: BigNumber;
      currIdx: BigNumber;
    }
  >;

  quoteExists(
    nodeAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  quotes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, BigNumber, BigNumber] & {
      queueAddress: string;
      authority: string;
      quoteBuffer: string;
      verificationStatus: number;
      verificationTimestamp: BigNumber;
      validUntil: BigNumber;
    }
  >;

  removeMrEnclave(
    queueAddress: PromiseOrValue<string>,
    mrEnclave: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPermission(
    granter: PromiseOrValue<string>,
    grantee: PromiseOrValue<string>,
    permission: PromiseOrValue<BigNumberish>,
    on: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQueueConfig(
    _queueAddress: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _maxSize: PromiseOrValue<BigNumberish>,
    _reward: PromiseOrValue<BigNumberish>,
    _nodeTimeout: PromiseOrValue<BigNumberish>,
    _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
    _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
    _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
    _requireUsagePermissions: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateQuote(
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    _quoteBuffer: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validate(
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyQuote(
    verifierAddress: PromiseOrValue<string>,
    quoteAddress: PromiseOrValue<string>,
    nodeIdx: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    HEARTBEAT_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    SERVICE_QUEUE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    USAGE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    addMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNode(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createServiceQueue(
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _nodeTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      _verifierQueueAddress: PromiseOrValue<string>,
      _enableContentHash: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    failQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      nodeIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceOverrideVerify(
      _queue: PromiseOrValue<string>,
      _node: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    generateAddress(overrides?: CallOverrides): Promise<string>;

    getNodeIdx(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    heartbeat(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _switchboard: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nodeAuthorityToQuoteAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    nodeExists(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, string, string] & {
        authority: string;
        numRows: number;
        lastHeartbeat: BigNumber;
        queueAddress: string;
        owner: string;
      }
    >;

    oracleQueueSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { v3Enabled: boolean; serviceQueue: string }
    >;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        authority: string;
        maxSize: BigNumber;
        reward: BigNumber;
        lastHeartbeat: BigNumber;
        maxQuoteVerificationAge: BigNumber;
        allowAuthorityOverrideAfter: BigNumber;
        requireAuthorityHeartbeatPermission: boolean;
        requireUsagePermissions: boolean;
        enableContentHash: boolean;
        verifierQueueAddress: string;
        nodeTimeout: BigNumber;
        gcIdx: BigNumber;
        currIdx: BigNumber;
      }
    >;

    quoteExists(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    quotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, BigNumber] & {
        queueAddress: string;
        authority: string;
        quoteBuffer: string;
        verificationStatus: number;
        verificationTimestamp: BigNumber;
        validUntil: BigNumber;
      }
    >;

    removeMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _nodeTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validate(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      nodeIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NodeAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): NodeAccountInitEventFilter;
    NodeAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): NodeAccountInitEventFilter;

    "NodeGC(address,address)"(
      nodeAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): NodeGCEventFilter;
    NodeGC(
      nodeAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): NodeGCEventFilter;

    "NodeHeartbeat(address,address)"(
      nodeAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): NodeHeartbeatEventFilter;
    NodeHeartbeat(
      nodeAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): NodeHeartbeatEventFilter;

    "NodePayoutEvent(address,address,uint256)"(
      nodeAddress?: PromiseOrValue<string> | null,
      quoteAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): NodePayoutEventEventFilter;
    NodePayoutEvent(
      nodeAddress?: PromiseOrValue<string> | null,
      quoteAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): NodePayoutEventEventFilter;

    "QuoteVerifyRequest(address,address,address)"(
      queueAddress?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;
    QuoteVerifyRequest(
      queueAddress?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;

    "ServiceQueueAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): ServiceQueueAccountInitEventFilter;
    ServiceQueueAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): ServiceQueueAccountInitEventFilter;
  };

  estimateGas: {
    HEARTBEAT_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    SERVICE_QUEUE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    USAGE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    addMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNode(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createServiceQueue(
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _nodeTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      _verifierQueueAddress: PromiseOrValue<string>,
      _enableContentHash: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    failQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      nodeIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceOverrideVerify(
      _queue: PromiseOrValue<string>,
      _node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNodeIdx(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heartbeat(
      nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _switchboard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nodeAuthorityToQuoteAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeExists(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleQueueSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteExists(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _nodeTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validate(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      nodeIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    HEARTBEAT_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SERVICE_QUEUE_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USAGE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNode(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createServiceQueue(
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _nodeTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      _verifierQueueAddress: PromiseOrValue<string>,
      _enableContentHash: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    failQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      nodeIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceOverrideVerify(
      _queue: PromiseOrValue<string>,
      _node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNodeIdx(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heartbeat(
      nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _switchboard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nodeAuthorityToQuoteAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeExists(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleQueueSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteExists(
      nodeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _nodeTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      nodeIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
