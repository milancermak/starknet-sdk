/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IAttestationServiceEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AttestationQueueAccountInit(address,address)": EventFragment;
    "FunctionAccountInit(address,address)": EventFragment;
    "FunctionFundEvent(address,address,uint256)": EventFragment;
    "QuoteAccountInit(address,address)": EventFragment;
    "QuoteGC(address,address)": EventFragment;
    "QuoteHeartbeat(address,address)": EventFragment;
    "QuotePayoutEvent(address,address,uint256)": EventFragment;
    "QuoteVerifyRequest(address,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AttestationQueueAccountInit"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionFundEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteGC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteHeartbeat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuotePayoutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteVerifyRequest"): EventFragment;
}

export interface AttestationQueueAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type AttestationQueueAccountInitEvent = TypedEvent<
  [string, string],
  AttestationQueueAccountInitEventObject
>;

export type AttestationQueueAccountInitEventFilter =
  TypedEventFilter<AttestationQueueAccountInitEvent>;

export interface FunctionAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type FunctionAccountInitEvent = TypedEvent<
  [string, string],
  FunctionAccountInitEventObject
>;

export type FunctionAccountInitEventFilter =
  TypedEventFilter<FunctionAccountInitEvent>;

export interface FunctionFundEventEventObject {
  functionAddress: string;
  funder: string;
  amount: BigNumber;
}
export type FunctionFundEventEvent = TypedEvent<
  [string, string, BigNumber],
  FunctionFundEventEventObject
>;

export type FunctionFundEventEventFilter =
  TypedEventFilter<FunctionFundEventEvent>;

export interface QuoteAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type QuoteAccountInitEvent = TypedEvent<
  [string, string],
  QuoteAccountInitEventObject
>;

export type QuoteAccountInitEventFilter =
  TypedEventFilter<QuoteAccountInitEvent>;

export interface QuoteGCEventObject {
  nodeAddress: string;
  queue: string;
}
export type QuoteGCEvent = TypedEvent<[string, string], QuoteGCEventObject>;

export type QuoteGCEventFilter = TypedEventFilter<QuoteGCEvent>;

export interface QuoteHeartbeatEventObject {
  nodeAddress: string;
  authority: string;
}
export type QuoteHeartbeatEvent = TypedEvent<
  [string, string],
  QuoteHeartbeatEventObject
>;

export type QuoteHeartbeatEventFilter = TypedEventFilter<QuoteHeartbeatEvent>;

export interface QuotePayoutEventEventObject {
  nodeAddress: string;
  quoteAddress: string;
  amount: BigNumber;
}
export type QuotePayoutEventEvent = TypedEvent<
  [string, string, BigNumber],
  QuotePayoutEventEventObject
>;

export type QuotePayoutEventEventFilter =
  TypedEventFilter<QuotePayoutEventEvent>;

export interface QuoteVerifyRequestEventObject {
  queueAddress: string;
  verifier: string;
  verifiee: string;
}
export type QuoteVerifyRequestEvent = TypedEvent<
  [string, string, string],
  QuoteVerifyRequestEventObject
>;

export type QuoteVerifyRequestEventFilter =
  TypedEventFilter<QuoteVerifyRequestEvent>;

export interface IAttestationServiceEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAttestationServiceEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AttestationQueueAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): AttestationQueueAccountInitEventFilter;
    AttestationQueueAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): AttestationQueueAccountInitEventFilter;

    "FunctionAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): FunctionAccountInitEventFilter;
    FunctionAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): FunctionAccountInitEventFilter;

    "FunctionFundEvent(address,address,uint256)"(
      functionAddress?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionFundEventEventFilter;
    FunctionFundEvent(
      functionAddress?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionFundEventEventFilter;

    "QuoteAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): QuoteAccountInitEventFilter;
    QuoteAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): QuoteAccountInitEventFilter;

    "QuoteGC(address,address)"(
      nodeAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): QuoteGCEventFilter;
    QuoteGC(
      nodeAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): QuoteGCEventFilter;

    "QuoteHeartbeat(address,address)"(
      nodeAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): QuoteHeartbeatEventFilter;
    QuoteHeartbeat(
      nodeAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): QuoteHeartbeatEventFilter;

    "QuotePayoutEvent(address,address,uint256)"(
      nodeAddress?: PromiseOrValue<string> | null,
      quoteAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): QuotePayoutEventEventFilter;
    QuotePayoutEvent(
      nodeAddress?: PromiseOrValue<string> | null,
      quoteAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): QuotePayoutEventEventFilter;

    "QuoteVerifyRequest(address,address,address)"(
      queueAddress?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;
    QuoteVerifyRequest(
      queueAddress?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
