/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IVsEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "NodeAccountInit(address,address)": EventFragment;
    "NodeGC(address,address)": EventFragment;
    "NodeHeartbeat(address,address)": EventFragment;
    "NodePayoutEvent(address,address,uint256)": EventFragment;
    "QuoteVerifyRequest(address,address,address)": EventFragment;
    "ServiceQueueAccountInit(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NodeAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeGC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeHeartbeat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodePayoutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteVerifyRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceQueueAccountInit"): EventFragment;
}

export interface NodeAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type NodeAccountInitEvent = TypedEvent<
  [string, string],
  NodeAccountInitEventObject
>;

export type NodeAccountInitEventFilter = TypedEventFilter<NodeAccountInitEvent>;

export interface NodeGCEventObject {
  nodeAddress: string;
  queue: string;
}
export type NodeGCEvent = TypedEvent<[string, string], NodeGCEventObject>;

export type NodeGCEventFilter = TypedEventFilter<NodeGCEvent>;

export interface NodeHeartbeatEventObject {
  nodeAddress: string;
  authority: string;
}
export type NodeHeartbeatEvent = TypedEvent<
  [string, string],
  NodeHeartbeatEventObject
>;

export type NodeHeartbeatEventFilter = TypedEventFilter<NodeHeartbeatEvent>;

export interface NodePayoutEventEventObject {
  nodeAddress: string;
  quoteAddress: string;
  amount: BigNumber;
}
export type NodePayoutEventEvent = TypedEvent<
  [string, string, BigNumber],
  NodePayoutEventEventObject
>;

export type NodePayoutEventEventFilter = TypedEventFilter<NodePayoutEventEvent>;

export interface QuoteVerifyRequestEventObject {
  queueAddress: string;
  verifier: string;
  verifiee: string;
}
export type QuoteVerifyRequestEvent = TypedEvent<
  [string, string, string],
  QuoteVerifyRequestEventObject
>;

export type QuoteVerifyRequestEventFilter =
  TypedEventFilter<QuoteVerifyRequestEvent>;

export interface ServiceQueueAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type ServiceQueueAccountInitEvent = TypedEvent<
  [string, string],
  ServiceQueueAccountInitEventObject
>;

export type ServiceQueueAccountInitEventFilter =
  TypedEventFilter<ServiceQueueAccountInitEvent>;

export interface IVsEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVsEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "NodeAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): NodeAccountInitEventFilter;
    NodeAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): NodeAccountInitEventFilter;

    "NodeGC(address,address)"(
      nodeAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): NodeGCEventFilter;
    NodeGC(
      nodeAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): NodeGCEventFilter;

    "NodeHeartbeat(address,address)"(
      nodeAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): NodeHeartbeatEventFilter;
    NodeHeartbeat(
      nodeAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): NodeHeartbeatEventFilter;

    "NodePayoutEvent(address,address,uint256)"(
      nodeAddress?: PromiseOrValue<string> | null,
      quoteAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): NodePayoutEventEventFilter;
    NodePayoutEvent(
      nodeAddress?: PromiseOrValue<string> | null,
      quoteAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): NodePayoutEventEventFilter;

    "QuoteVerifyRequest(address,address,address)"(
      queueAddress?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;
    QuoteVerifyRequest(
      queueAddress?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;

    "ServiceQueueAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): ServiceQueueAccountInitEventFilter;
    ServiceQueueAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): ServiceQueueAccountInitEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
