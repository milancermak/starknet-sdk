/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ISbEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AggregatorAccountInit(address,address,uint256)": EventFragment;
    "AggregatorFundEvent(address,address,uint256)": EventFragment;
    "AggregatorIntervalRefreshed(address,uint256,uint256)": EventFragment;
    "AggregatorResponseSettingsUpdate(address,uint256,uint256,uint256)": EventFragment;
    "AggregatorSaveResult(address,address,int256)": EventFragment;
    "AggregatorUpdate(address,int256,uint256)": EventFragment;
    "OracleAccountInit(address,address)": EventFragment;
    "OraclePayoutEvent(address,address,uint256)": EventFragment;
    "OracleQueueAccountInit(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorFundEvent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AggregatorIntervalRefreshed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AggregatorResponseSettingsUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorSaveResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OraclePayoutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleQueueAccountInit"): EventFragment;
}

export interface AggregatorAccountInitEventObject {
  authority: string;
  accountAddress: string;
  timestamp: BigNumber;
}
export type AggregatorAccountInitEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorAccountInitEventObject
>;

export type AggregatorAccountInitEventFilter =
  TypedEventFilter<AggregatorAccountInitEvent>;

export interface AggregatorFundEventEventObject {
  aggregatorAddress: string;
  funder: string;
  amount: BigNumber;
}
export type AggregatorFundEventEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorFundEventEventObject
>;

export type AggregatorFundEventEventFilter =
  TypedEventFilter<AggregatorFundEventEvent>;

export interface AggregatorIntervalRefreshedEventObject {
  aggregatorAddress: string;
  intervalId: BigNumber;
  balanceLeftForInterval: BigNumber;
}
export type AggregatorIntervalRefreshedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AggregatorIntervalRefreshedEventObject
>;

export type AggregatorIntervalRefreshedEventFilter =
  TypedEventFilter<AggregatorIntervalRefreshedEvent>;

export interface AggregatorResponseSettingsUpdateEventObject {
  aggregatorAddress: string;
  varianceThreshold: BigNumber;
  minJobResults: BigNumber;
  forceReportPeriod: BigNumber;
}
export type AggregatorResponseSettingsUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AggregatorResponseSettingsUpdateEventObject
>;

export type AggregatorResponseSettingsUpdateEventFilter =
  TypedEventFilter<AggregatorResponseSettingsUpdateEvent>;

export interface AggregatorSaveResultEventObject {
  aggregatorAddress: string;
  oracle: string;
  value: BigNumber;
}
export type AggregatorSaveResultEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorSaveResultEventObject
>;

export type AggregatorSaveResultEventFilter =
  TypedEventFilter<AggregatorSaveResultEvent>;

export interface AggregatorUpdateEventObject {
  aggregatorAddress: string;
  value: BigNumber;
  timestamp: BigNumber;
}
export type AggregatorUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AggregatorUpdateEventObject
>;

export type AggregatorUpdateEventFilter =
  TypedEventFilter<AggregatorUpdateEvent>;

export interface OracleAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type OracleAccountInitEvent = TypedEvent<
  [string, string],
  OracleAccountInitEventObject
>;

export type OracleAccountInitEventFilter =
  TypedEventFilter<OracleAccountInitEvent>;

export interface OraclePayoutEventEventObject {
  oracleAddress: string;
  aggregatorAddress: string;
  amount: BigNumber;
}
export type OraclePayoutEventEvent = TypedEvent<
  [string, string, BigNumber],
  OraclePayoutEventEventObject
>;

export type OraclePayoutEventEventFilter =
  TypedEventFilter<OraclePayoutEventEvent>;

export interface OracleQueueAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type OracleQueueAccountInitEvent = TypedEvent<
  [string, string],
  OracleQueueAccountInitEventObject
>;

export type OracleQueueAccountInitEventFilter =
  TypedEventFilter<OracleQueueAccountInitEvent>;

export interface ISbEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISbEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AggregatorAccountInit(address,address,uint256)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AggregatorAccountInitEventFilter;
    AggregatorAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AggregatorAccountInitEventFilter;

    "AggregatorFundEvent(address,address,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorFundEventEventFilter;
    AggregatorFundEvent(
      aggregatorAddress?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorFundEventEventFilter;

    "AggregatorIntervalRefreshed(address,uint256,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      intervalId?: PromiseOrValue<BigNumberish> | null,
      balanceLeftForInterval?: PromiseOrValue<BigNumberish> | null
    ): AggregatorIntervalRefreshedEventFilter;
    AggregatorIntervalRefreshed(
      aggregatorAddress?: PromiseOrValue<string> | null,
      intervalId?: PromiseOrValue<BigNumberish> | null,
      balanceLeftForInterval?: PromiseOrValue<BigNumberish> | null
    ): AggregatorIntervalRefreshedEventFilter;

    "AggregatorResponseSettingsUpdate(address,uint256,uint256,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      varianceThreshold?: null,
      minJobResults?: null,
      forceReportPeriod?: null
    ): AggregatorResponseSettingsUpdateEventFilter;
    AggregatorResponseSettingsUpdate(
      aggregatorAddress?: PromiseOrValue<string> | null,
      varianceThreshold?: null,
      minJobResults?: null,
      forceReportPeriod?: null
    ): AggregatorResponseSettingsUpdateEventFilter;

    "AggregatorSaveResult(address,address,int256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): AggregatorSaveResultEventFilter;
    AggregatorSaveResult(
      aggregatorAddress?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): AggregatorSaveResultEventFilter;

    "AggregatorUpdate(address,int256,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): AggregatorUpdateEventFilter;
    AggregatorUpdate(
      aggregatorAddress?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): AggregatorUpdateEventFilter;

    "OracleAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleAccountInitEventFilter;
    OracleAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleAccountInitEventFilter;

    "OraclePayoutEvent(address,address,uint256)"(
      oracleAddress?: PromiseOrValue<string> | null,
      aggregatorAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OraclePayoutEventEventFilter;
    OraclePayoutEvent(
      oracleAddress?: PromiseOrValue<string> | null,
      aggregatorAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OraclePayoutEventEventFilter;

    "OracleQueueAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleQueueAccountInitEventFilter;
    OracleQueueAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleQueueAccountInitEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
