/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace SbStructs {
  export type ResultStruct = {
    value: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    oracleAddress: PromiseOrValue<string>;
  };

  export type ResultStructOutput = [BigNumber, BigNumber, string] & {
    value: BigNumber;
    timestamp: BigNumber;
    oracleAddress: string;
  };

  export type AggregatorStruct = {
    name: PromiseOrValue<string>;
    authority: PromiseOrValue<string>;
    latestResult: SbStructs.ResultStruct;
    batchSize: PromiseOrValue<BigNumberish>;
    minUpdateDelaySeconds: PromiseOrValue<BigNumberish>;
    minOracleResults: PromiseOrValue<BigNumberish>;
    jobsHash: PromiseOrValue<string>;
    queueAddress: PromiseOrValue<string>;
    balanceLeftForInterval: PromiseOrValue<BigNumberish>;
    nextIntervalRefreshTime: PromiseOrValue<BigNumberish>;
    intervalId: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
  };

  export type AggregatorStructOutput = [
    string,
    string,
    SbStructs.ResultStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    authority: string;
    latestResult: SbStructs.ResultStructOutput;
    batchSize: BigNumber;
    minUpdateDelaySeconds: BigNumber;
    minOracleResults: BigNumber;
    jobsHash: string;
    queueAddress: string;
    balanceLeftForInterval: BigNumber;
    nextIntervalRefreshTime: BigNumber;
    intervalId: BigNumber;
    balance: BigNumber;
  };
}

export interface SwitchboardInterface extends utils.Interface {
  functions: {
    "NULL_ADDRESS()": FunctionFragment;
    "aggregatorAddresses(uint256)": FunctionFragment;
    "aggregatorExists(address)": FunctionFragment;
    "aggregatorHistory(address,uint80)": FunctionFragment;
    "aggregatorReadConfigs(address)": FunctionFragment;
    "aggregatorResults(address,uint256)": FunctionFragment;
    "aggregators(address)": FunctionFragment;
    "createAggregator(string,address,uint256,uint256,uint256,string,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "createOracle(string,address,address)": FunctionFragment;
    "createOracleQueue(string,address,bool,uint256,uint256,uint256)": FunctionFragment;
    "escrowFund(address)": FunctionFragment;
    "escrowWithdraw(address,address,uint256)": FunctionFragment;
    "getAggregatorsByAuthority(address)": FunctionFragment;
    "getCurrentIntervalId(address)": FunctionFragment;
    "getIntervalResult(address,uint80)": FunctionFragment;
    "getOracleIdx(address)": FunctionFragment;
    "getPermissionCode(uint8)": FunctionFragment;
    "getReadCost(address)": FunctionFragment;
    "hasPermission(address,address,uint256)": FunctionFragment;
    "heartbeat(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "latestResult(address)": FunctionFragment;
    "oracleExists(address)": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "permissions(address,address)": FunctionFragment;
    "queueExists(address)": FunctionFragment;
    "queues(address)": FunctionFragment;
    "saveResults(address[],int256[],address,uint256)": FunctionFragment;
    "setAggregatorConfig(address,string,address,uint256,uint256,uint256,string,address,uint256,uint256,uint256)": FunctionFragment;
    "setAggregatorReadConfig(address,uint256,address,address[],bool,bool)": FunctionFragment;
    "setOracleConfig(address,string,address,address)": FunctionFragment;
    "setPermission(address,address,uint256,bool)": FunctionFragment;
    "setQueueConfig(address,string,address,bool,uint256,uint256,uint256)": FunctionFragment;
    "switchboardVS()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NULL_ADDRESS"
      | "aggregatorAddresses"
      | "aggregatorExists"
      | "aggregatorHistory"
      | "aggregatorReadConfigs"
      | "aggregatorResults"
      | "aggregators"
      | "createAggregator"
      | "createOracle"
      | "createOracleQueue"
      | "escrowFund"
      | "escrowWithdraw"
      | "getAggregatorsByAuthority"
      | "getCurrentIntervalId"
      | "getIntervalResult"
      | "getOracleIdx"
      | "getPermissionCode"
      | "getReadCost"
      | "hasPermission"
      | "heartbeat"
      | "initialize"
      | "latestResult"
      | "oracleExists"
      | "oracles"
      | "permissions"
      | "queueExists"
      | "queues"
      | "saveResults"
      | "setAggregatorConfig"
      | "setAggregatorReadConfig"
      | "setOracleConfig"
      | "setPermission"
      | "setQueueConfig"
      | "switchboardVS"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NULL_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorHistory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorReadConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorResults",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAggregator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOracle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOracleQueue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregatorsByAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentIntervalId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntervalResult",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleIdx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionCode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadCost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "heartbeat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestResult",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveResults",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregatorConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregatorReadConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setQueueConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "switchboardVS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "NULL_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorReadConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOracleQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrowFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAggregatorsByAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentIntervalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntervalResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReadCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heartbeat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saveResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAggregatorConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAggregatorReadConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQueueConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchboardVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AggregatorAccountInit(address,address,uint256)": EventFragment;
    "AggregatorFundEvent(address,address,uint256)": EventFragment;
    "AggregatorIntervalRefreshed(address,uint256,uint256)": EventFragment;
    "AggregatorResponseSettingsUpdate(address,uint256,uint256,uint256)": EventFragment;
    "AggregatorSaveResult(address,address,int256)": EventFragment;
    "AggregatorUpdate(address,int256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OracleAccountInit(address,address)": EventFragment;
    "OraclePayoutEvent(address,address,uint256)": EventFragment;
    "OracleQueueAccountInit(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorFundEvent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AggregatorIntervalRefreshed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AggregatorResponseSettingsUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorSaveResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OraclePayoutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleQueueAccountInit"): EventFragment;
}

export interface AggregatorAccountInitEventObject {
  authority: string;
  accountAddress: string;
  timestamp: BigNumber;
}
export type AggregatorAccountInitEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorAccountInitEventObject
>;

export type AggregatorAccountInitEventFilter =
  TypedEventFilter<AggregatorAccountInitEvent>;

export interface AggregatorFundEventEventObject {
  aggregatorAddress: string;
  funder: string;
  amount: BigNumber;
}
export type AggregatorFundEventEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorFundEventEventObject
>;

export type AggregatorFundEventEventFilter =
  TypedEventFilter<AggregatorFundEventEvent>;

export interface AggregatorIntervalRefreshedEventObject {
  aggregatorAddress: string;
  intervalId: BigNumber;
  balanceLeftForInterval: BigNumber;
}
export type AggregatorIntervalRefreshedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AggregatorIntervalRefreshedEventObject
>;

export type AggregatorIntervalRefreshedEventFilter =
  TypedEventFilter<AggregatorIntervalRefreshedEvent>;

export interface AggregatorResponseSettingsUpdateEventObject {
  aggregatorAddress: string;
  varianceThreshold: BigNumber;
  minJobResults: BigNumber;
  forceReportPeriod: BigNumber;
}
export type AggregatorResponseSettingsUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AggregatorResponseSettingsUpdateEventObject
>;

export type AggregatorResponseSettingsUpdateEventFilter =
  TypedEventFilter<AggregatorResponseSettingsUpdateEvent>;

export interface AggregatorSaveResultEventObject {
  aggregatorAddress: string;
  oracle: string;
  value: BigNumber;
}
export type AggregatorSaveResultEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorSaveResultEventObject
>;

export type AggregatorSaveResultEventFilter =
  TypedEventFilter<AggregatorSaveResultEvent>;

export interface AggregatorUpdateEventObject {
  aggregatorAddress: string;
  value: BigNumber;
  timestamp: BigNumber;
}
export type AggregatorUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AggregatorUpdateEventObject
>;

export type AggregatorUpdateEventFilter =
  TypedEventFilter<AggregatorUpdateEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OracleAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type OracleAccountInitEvent = TypedEvent<
  [string, string],
  OracleAccountInitEventObject
>;

export type OracleAccountInitEventFilter =
  TypedEventFilter<OracleAccountInitEvent>;

export interface OraclePayoutEventEventObject {
  oracleAddress: string;
  aggregatorAddress: string;
  amount: BigNumber;
}
export type OraclePayoutEventEvent = TypedEvent<
  [string, string, BigNumber],
  OraclePayoutEventEventObject
>;

export type OraclePayoutEventEventFilter =
  TypedEventFilter<OraclePayoutEventEvent>;

export interface OracleQueueAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type OracleQueueAccountInitEvent = TypedEvent<
  [string, string],
  OracleQueueAccountInitEventObject
>;

export type OracleQueueAccountInitEventFilter =
  TypedEventFilter<OracleQueueAccountInitEvent>;

export interface Switchboard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwitchboardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NULL_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    aggregatorAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    aggregatorExists(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    aggregatorHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        timestamp: BigNumber;
        medianTimestamp: BigNumber;
      }
    >;

    aggregatorReadConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, boolean] & {
        readCharge: BigNumber;
        rewardEscrow: string;
        limitReadsToWhitelist: boolean;
        historyEnabled: boolean;
      }
    >;

    aggregatorResults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        value: BigNumber;
        timestamp: BigNumber;
        oracleAddress: string;
      }
    >;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        SbStructs.ResultStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        authority: string;
        latestResult: SbStructs.ResultStructOutput;
        batchSize: BigNumber;
        minUpdateDelaySeconds: BigNumber;
        minOracleResults: BigNumber;
        jobsHash: string;
        queueAddress: string;
        balanceLeftForInterval: BigNumber;
        nextIntervalRefreshTime: BigNumber;
        intervalId: BigNumber;
        balance: BigNumber;
      }
    >;

    createAggregator(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOracle(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOracleQueue(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowFund(
      accountAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAggregatorsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], SbStructs.AggregatorStructOutput[]]>;

    getCurrentIntervalId(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { roundId: BigNumber }>;

    getIntervalResult(
      aggregatorAddress: PromiseOrValue<string>,
      intervalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        timestamp: BigNumber;
        medianTimestamp: BigNumber;
      }
    >;

    getOracleIdx(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPermissionCode(
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReadCost(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    heartbeat(
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _switchboardVS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestResult(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleExists(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, string] & {
        name: string;
        authority: string;
        numRows: number;
        lastHeartbeat: BigNumber;
        queueAddress: string;
      }
    >;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        authority: string;
        unpermissionedFeedsEnabled: boolean;
        maxSize: BigNumber;
        reward: BigNumber;
        oracleTimeout: BigNumber;
        gcIdx: BigNumber;
        currIdx: BigNumber;
      }
    >;

    saveResults(
      addresses: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueAddress: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAggregatorConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAggregatorReadConfig(
      aggregatorAddress: PromiseOrValue<string>,
      readCharge: PromiseOrValue<BigNumberish>,
      rewardEscrow: PromiseOrValue<string>,
      readWhiteList: PromiseOrValue<string>[],
      limitReadsToWhitelist: PromiseOrValue<boolean>,
      historyEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleConfig(
      _oracleAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPermission(
      queueAddress: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchboardVS(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  NULL_ADDRESS(overrides?: CallOverrides): Promise<string>;

  aggregatorAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  aggregatorExists(
    aggregatorAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  aggregatorHistory(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      timestamp: BigNumber;
      medianTimestamp: BigNumber;
    }
  >;

  aggregatorReadConfigs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean, boolean] & {
      readCharge: BigNumber;
      rewardEscrow: string;
      limitReadsToWhitelist: boolean;
      historyEnabled: boolean;
    }
  >;

  aggregatorResults(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      value: BigNumber;
      timestamp: BigNumber;
      oracleAddress: string;
    }
  >;

  aggregators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      SbStructs.ResultStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      authority: string;
      latestResult: SbStructs.ResultStructOutput;
      batchSize: BigNumber;
      minUpdateDelaySeconds: BigNumber;
      minOracleResults: BigNumber;
      jobsHash: string;
      queueAddress: string;
      balanceLeftForInterval: BigNumber;
      nextIntervalRefreshTime: BigNumber;
      intervalId: BigNumber;
      balance: BigNumber;
    }
  >;

  createAggregator(
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _batchSize: PromiseOrValue<BigNumberish>,
    _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
    _minOracleResults: PromiseOrValue<BigNumberish>,
    _jobsHash: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    varianceThreshold: PromiseOrValue<BigNumberish>,
    minJobResults: PromiseOrValue<BigNumberish>,
    forceReportPeriod: PromiseOrValue<BigNumberish>,
    enableHistory: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOracle(
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOracleQueue(
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
    _maxSize: PromiseOrValue<BigNumberish>,
    _reward: PromiseOrValue<BigNumberish>,
    _oracleTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowFund(
    accountAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowWithdraw(
    recipient: PromiseOrValue<string>,
    aggregatorAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAggregatorsByAuthority(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], SbStructs.AggregatorStructOutput[]]>;

  getCurrentIntervalId(
    aggregatorAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIntervalResult(
    aggregatorAddress: PromiseOrValue<string>,
    intervalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      timestamp: BigNumber;
      medianTimestamp: BigNumber;
    }
  >;

  getOracleIdx(
    oracleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPermissionCode(
    p: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReadCost(
    aggregatorAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasPermission(
    granter: PromiseOrValue<string>,
    grantee: PromiseOrValue<string>,
    permission: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  heartbeat(
    oracleAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _switchboardVS: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestResult(
    aggregatorAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleExists(
    oracleAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber, string] & {
      name: string;
      authority: string;
      numRows: number;
      lastHeartbeat: BigNumber;
      queueAddress: string;
    }
  >;

  permissions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queueExists(
    queueAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queues(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      authority: string;
      unpermissionedFeedsEnabled: boolean;
      maxSize: BigNumber;
      reward: BigNumber;
      oracleTimeout: BigNumber;
      gcIdx: BigNumber;
      currIdx: BigNumber;
    }
  >;

  saveResults(
    addresses: PromiseOrValue<string>[],
    results: PromiseOrValue<BigNumberish>[],
    queueAddress: PromiseOrValue<string>,
    oracleIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAggregatorConfig(
    _aggregatorAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _batchSize: PromiseOrValue<BigNumberish>,
    _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
    _minOracleResults: PromiseOrValue<BigNumberish>,
    _jobsHash: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    varianceThreshold: PromiseOrValue<BigNumberish>,
    minJobResults: PromiseOrValue<BigNumberish>,
    forceReportPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAggregatorReadConfig(
    aggregatorAddress: PromiseOrValue<string>,
    readCharge: PromiseOrValue<BigNumberish>,
    rewardEscrow: PromiseOrValue<string>,
    readWhiteList: PromiseOrValue<string>[],
    limitReadsToWhitelist: PromiseOrValue<boolean>,
    historyEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleConfig(
    _oracleAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPermission(
    queueAddress: PromiseOrValue<string>,
    grantee: PromiseOrValue<string>,
    permission: PromiseOrValue<BigNumberish>,
    on: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQueueConfig(
    _queueAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
    _maxSize: PromiseOrValue<BigNumberish>,
    _reward: PromiseOrValue<BigNumberish>,
    _oracleTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchboardVS(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    NULL_ADDRESS(overrides?: CallOverrides): Promise<string>;

    aggregatorAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    aggregatorExists(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    aggregatorHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        timestamp: BigNumber;
        medianTimestamp: BigNumber;
      }
    >;

    aggregatorReadConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, boolean] & {
        readCharge: BigNumber;
        rewardEscrow: string;
        limitReadsToWhitelist: boolean;
        historyEnabled: boolean;
      }
    >;

    aggregatorResults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        value: BigNumber;
        timestamp: BigNumber;
        oracleAddress: string;
      }
    >;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        SbStructs.ResultStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        authority: string;
        latestResult: SbStructs.ResultStructOutput;
        batchSize: BigNumber;
        minUpdateDelaySeconds: BigNumber;
        minOracleResults: BigNumber;
        jobsHash: string;
        queueAddress: string;
        balanceLeftForInterval: BigNumber;
        nextIntervalRefreshTime: BigNumber;
        intervalId: BigNumber;
        balance: BigNumber;
      }
    >;

    createAggregator(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOracle(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOracleQueue(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowFund(
      accountAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAggregatorsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], SbStructs.AggregatorStructOutput[]]>;

    getCurrentIntervalId(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntervalResult(
      aggregatorAddress: PromiseOrValue<string>,
      intervalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        timestamp: BigNumber;
        medianTimestamp: BigNumber;
      }
    >;

    getOracleIdx(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionCode(
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReadCost(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    heartbeat(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _switchboardVS: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    latestResult(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;

    oracleExists(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, string] & {
        name: string;
        authority: string;
        numRows: number;
        lastHeartbeat: BigNumber;
        queueAddress: string;
      }
    >;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        authority: string;
        unpermissionedFeedsEnabled: boolean;
        maxSize: BigNumber;
        reward: BigNumber;
        oracleTimeout: BigNumber;
        gcIdx: BigNumber;
        currIdx: BigNumber;
      }
    >;

    saveResults(
      addresses: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueAddress: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAggregatorConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAggregatorReadConfig(
      aggregatorAddress: PromiseOrValue<string>,
      readCharge: PromiseOrValue<BigNumberish>,
      rewardEscrow: PromiseOrValue<string>,
      readWhiteList: PromiseOrValue<string>[],
      limitReadsToWhitelist: PromiseOrValue<boolean>,
      historyEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleConfig(
      _oracleAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermission(
      queueAddress: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    switchboardVS(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AggregatorAccountInit(address,address,uint256)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AggregatorAccountInitEventFilter;
    AggregatorAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AggregatorAccountInitEventFilter;

    "AggregatorFundEvent(address,address,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorFundEventEventFilter;
    AggregatorFundEvent(
      aggregatorAddress?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorFundEventEventFilter;

    "AggregatorIntervalRefreshed(address,uint256,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      intervalId?: PromiseOrValue<BigNumberish> | null,
      balanceLeftForInterval?: PromiseOrValue<BigNumberish> | null
    ): AggregatorIntervalRefreshedEventFilter;
    AggregatorIntervalRefreshed(
      aggregatorAddress?: PromiseOrValue<string> | null,
      intervalId?: PromiseOrValue<BigNumberish> | null,
      balanceLeftForInterval?: PromiseOrValue<BigNumberish> | null
    ): AggregatorIntervalRefreshedEventFilter;

    "AggregatorResponseSettingsUpdate(address,uint256,uint256,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      varianceThreshold?: null,
      minJobResults?: null,
      forceReportPeriod?: null
    ): AggregatorResponseSettingsUpdateEventFilter;
    AggregatorResponseSettingsUpdate(
      aggregatorAddress?: PromiseOrValue<string> | null,
      varianceThreshold?: null,
      minJobResults?: null,
      forceReportPeriod?: null
    ): AggregatorResponseSettingsUpdateEventFilter;

    "AggregatorSaveResult(address,address,int256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): AggregatorSaveResultEventFilter;
    AggregatorSaveResult(
      aggregatorAddress?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): AggregatorSaveResultEventFilter;

    "AggregatorUpdate(address,int256,uint256)"(
      aggregatorAddress?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): AggregatorUpdateEventFilter;
    AggregatorUpdate(
      aggregatorAddress?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): AggregatorUpdateEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OracleAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleAccountInitEventFilter;
    OracleAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleAccountInitEventFilter;

    "OraclePayoutEvent(address,address,uint256)"(
      oracleAddress?: PromiseOrValue<string> | null,
      aggregatorAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OraclePayoutEventEventFilter;
    OraclePayoutEvent(
      oracleAddress?: PromiseOrValue<string> | null,
      aggregatorAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OraclePayoutEventEventFilter;

    "OracleQueueAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleQueueAccountInitEventFilter;
    OracleQueueAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleQueueAccountInitEventFilter;
  };

  estimateGas: {
    NULL_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    aggregatorAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregatorExists(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregatorHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregatorReadConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregatorResults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAggregator(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOracle(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOracleQueue(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowFund(
      accountAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAggregatorsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentIntervalId(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntervalResult(
      aggregatorAddress: PromiseOrValue<string>,
      intervalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleIdx(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionCode(
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReadCost(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heartbeat(
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _switchboardVS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestResult(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleExists(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saveResults(
      addresses: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueAddress: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAggregatorConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAggregatorReadConfig(
      aggregatorAddress: PromiseOrValue<string>,
      readCharge: PromiseOrValue<BigNumberish>,
      rewardEscrow: PromiseOrValue<string>,
      readWhiteList: PromiseOrValue<string>[],
      limitReadsToWhitelist: PromiseOrValue<boolean>,
      historyEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleConfig(
      _oracleAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPermission(
      queueAddress: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchboardVS(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NULL_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aggregatorAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregatorExists(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregatorHistory(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregatorReadConfigs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregatorResults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAggregator(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOracle(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOracleQueue(
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowFund(
      accountAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAggregatorsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentIntervalId(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIntervalResult(
      aggregatorAddress: PromiseOrValue<string>,
      intervalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleIdx(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissionCode(
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReadCost(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heartbeat(
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _switchboardVS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestResult(
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleExists(
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saveResults(
      addresses: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueAddress: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAggregatorConfig(
      _aggregatorAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _batchSize: PromiseOrValue<BigNumberish>,
      _minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      _minOracleResults: PromiseOrValue<BigNumberish>,
      _jobsHash: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAggregatorReadConfig(
      aggregatorAddress: PromiseOrValue<string>,
      readCharge: PromiseOrValue<BigNumberish>,
      rewardEscrow: PromiseOrValue<string>,
      readWhiteList: PromiseOrValue<string>[],
      limitReadsToWhitelist: PromiseOrValue<boolean>,
      historyEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleConfig(
      _oracleAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPermission(
      queueAddress: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchboardVS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
