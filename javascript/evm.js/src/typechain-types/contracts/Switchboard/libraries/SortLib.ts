/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace SbStructs {
  export type ResultStruct = {
    value: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    oracleAddress: PromiseOrValue<string>;
  };

  export type ResultStructOutput = [BigNumber, BigNumber, string] & {
    value: BigNumber;
    timestamp: BigNumber;
    oracleAddress: string;
  };
}

export interface SortLibInterface extends utils.Interface {
  functions: {
    "getMedian((int256,uint256,address)[])": FunctionFragment;
    "sortResults((int256,uint256,address)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getMedian" | "sortResults"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMedian",
    values: [SbStructs.ResultStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sortResults",
    values: [SbStructs.ResultStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "getMedian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortResults",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SortLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SortLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMedian(
      arr: SbStructs.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    sortResults(
      input: SbStructs.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<[SbStructs.ResultStructOutput[]]>;
  };

  getMedian(
    arr: SbStructs.ResultStruct[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  sortResults(
    input: SbStructs.ResultStruct[],
    overrides?: CallOverrides
  ): Promise<SbStructs.ResultStructOutput[]>;

  callStatic: {
    getMedian(
      arr: SbStructs.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    sortResults(
      input: SbStructs.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<SbStructs.ResultStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getMedian(
      arr: SbStructs.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sortResults(
      input: SbStructs.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMedian(
      arr: SbStructs.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sortResults(
      input: SbStructs.ResultStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
