/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface CoreSwitchboardVSInterface extends utils.Interface {
  functions: {
    "HEARTBEAT_PERMISSION()": FunctionFragment;
    "SERVICE_QUEUE_PERMISSION()": FunctionFragment;
    "USAGE_PERMISSION()": FunctionFragment;
    "addMrEnclave(address,bytes32)": FunctionFragment;
    "createQuote(address,address,address)": FunctionFragment;
    "createServiceQueue(address,uint256,uint256,uint256,uint256,uint256,bool,bool,bool)": FunctionFragment;
    "failQuote(address,address,uint256)": FunctionFragment;
    "forceOverrideVerify(address,address)": FunctionFragment;
    "generateAddress()": FunctionFragment;
    "getQuoteIdx(address)": FunctionFragment;
    "hasMrEnclave(address,bytes32)": FunctionFragment;
    "hasPermission(address,address,uint256)": FunctionFragment;
    "heartbeat(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "oracleQueueSettings(address)": FunctionFragment;
    "permissions(address,address)": FunctionFragment;
    "queueExists(address)": FunctionFragment;
    "queues(address)": FunctionFragment;
    "quoteAuthorityToQuoteAddress(address)": FunctionFragment;
    "quoteExists(address)": FunctionFragment;
    "quotes(address)": FunctionFragment;
    "removeMrEnclave(address,bytes32)": FunctionFragment;
    "reverify(address)": FunctionFragment;
    "setPermission(address,address,uint256,bool)": FunctionFragment;
    "setQueueConfig(address,address,uint256,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "switchboard()": FunctionFragment;
    "updateQuote(address,address,bytes)": FunctionFragment;
    "validate(address)": FunctionFragment;
    "verifyQuote(address,address,uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HEARTBEAT_PERMISSION"
      | "SERVICE_QUEUE_PERMISSION"
      | "USAGE_PERMISSION"
      | "addMrEnclave"
      | "createQuote"
      | "createServiceQueue"
      | "failQuote"
      | "forceOverrideVerify"
      | "generateAddress"
      | "getQuoteIdx"
      | "hasMrEnclave"
      | "hasPermission"
      | "heartbeat"
      | "initialize"
      | "oracleQueueSettings"
      | "permissions"
      | "queueExists"
      | "queues"
      | "quoteAuthorityToQuoteAddress"
      | "quoteExists"
      | "quotes"
      | "removeMrEnclave"
      | "reverify"
      | "setPermission"
      | "setQueueConfig"
      | "switchboard"
      | "updateQuote"
      | "validate"
      | "verifyQuote"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HEARTBEAT_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SERVICE_QUEUE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USAGE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMrEnclave",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createServiceQueue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "failQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forceOverrideVerify",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteIdx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMrEnclave",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "heartbeat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleQueueSettings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAuthorityToQuoteAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMrEnclave",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "reverify",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setQueueConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "switchboard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "HEARTBEAT_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SERVICE_QUEUE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USAGE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMrEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createServiceQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceOverrideVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMrEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heartbeat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleQueueSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteAuthorityToQuoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMrEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reverify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQueueConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "QuoteAccountInit(address,address)": EventFragment;
    "QuoteGC(address,address)": EventFragment;
    "QuoteHeartbeat(address,address)": EventFragment;
    "QuotePayoutEvent(address,uint256)": EventFragment;
    "QuoteVerifyRequest(address,address,address)": EventFragment;
    "ServiceQueueAccountInit(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteGC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteHeartbeat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuotePayoutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteVerifyRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceQueueAccountInit"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface QuoteAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type QuoteAccountInitEvent = TypedEvent<
  [string, string],
  QuoteAccountInitEventObject
>;

export type QuoteAccountInitEventFilter =
  TypedEventFilter<QuoteAccountInitEvent>;

export interface QuoteGCEventObject {
  quoteAddress: string;
  queue: string;
}
export type QuoteGCEvent = TypedEvent<[string, string], QuoteGCEventObject>;

export type QuoteGCEventFilter = TypedEventFilter<QuoteGCEvent>;

export interface QuoteHeartbeatEventObject {
  quoteAddress: string;
  authority: string;
}
export type QuoteHeartbeatEvent = TypedEvent<
  [string, string],
  QuoteHeartbeatEventObject
>;

export type QuoteHeartbeatEventFilter = TypedEventFilter<QuoteHeartbeatEvent>;

export interface QuotePayoutEventEventObject {
  quoteAddress: string;
  amount: BigNumber;
}
export type QuotePayoutEventEvent = TypedEvent<
  [string, BigNumber],
  QuotePayoutEventEventObject
>;

export type QuotePayoutEventEventFilter =
  TypedEventFilter<QuotePayoutEventEvent>;

export interface QuoteVerifyRequestEventObject {
  queueAddress: string;
  verifier: string;
  verifiee: string;
}
export type QuoteVerifyRequestEvent = TypedEvent<
  [string, string, string],
  QuoteVerifyRequestEventObject
>;

export type QuoteVerifyRequestEventFilter =
  TypedEventFilter<QuoteVerifyRequestEvent>;

export interface ServiceQueueAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type ServiceQueueAccountInitEvent = TypedEvent<
  [string, string],
  ServiceQueueAccountInitEventObject
>;

export type ServiceQueueAccountInitEventFilter =
  TypedEventFilter<ServiceQueueAccountInitEvent>;

export interface CoreSwitchboardVS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreSwitchboardVSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HEARTBEAT_PERMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    SERVICE_QUEUE_PERMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USAGE_PERMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createServiceQueue(
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _quoteTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      _enableContentHash: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    failQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceOverrideVerify(
      _queue: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getQuoteIdx(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    heartbeat(
      quoteAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _switchboard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleQueueSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { v3Enabled: boolean; serviceQueue: string }
    >;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        authority: string;
        maxSize: BigNumber;
        reward: BigNumber;
        lastHeartbeat: BigNumber;
        maxQuoteVerificationAge: BigNumber;
        allowAuthorityOverrideAfter: BigNumber;
        requireAuthorityHeartbeatPermission: boolean;
        requireUsagePermissions: boolean;
        enableContentHash: boolean;
        quoteTimeout: BigNumber;
        gcIdx: BigNumber;
        currIdx: BigNumber;
      }
    >;

    quoteAuthorityToQuoteAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quoteExists(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    quotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        string
      ] & {
        queueAddress: string;
        authority: string;
        quoteBuffer: string;
        verificationStatus: number;
        verificationTimestamp: BigNumber;
        validUntil: BigNumber;
        numRows: number;
        lastHeartbeat: BigNumber;
        owner: string;
      }
    >;

    removeMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reverify(
      quoteAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _quoteTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchboard(overrides?: CallOverrides): Promise<[string]>;

    updateQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validate(
      _authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  HEARTBEAT_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  SERVICE_QUEUE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  USAGE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  addMrEnclave(
    queueAddress: PromiseOrValue<string>,
    mrEnclave: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createQuote(
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createServiceQueue(
    _authority: PromiseOrValue<string>,
    _maxSize: PromiseOrValue<BigNumberish>,
    _reward: PromiseOrValue<BigNumberish>,
    _quoteTimeout: PromiseOrValue<BigNumberish>,
    _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
    _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
    _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
    _requireUsagePermissions: PromiseOrValue<boolean>,
    _enableContentHash: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  failQuote(
    verifierAddress: PromiseOrValue<string>,
    quoteAddress: PromiseOrValue<string>,
    quoteIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceOverrideVerify(
    _queue: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getQuoteIdx(
    quoteAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasMrEnclave(
    queueAddress: PromiseOrValue<string>,
    mrEnclave: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasPermission(
    granter: PromiseOrValue<string>,
    grantee: PromiseOrValue<string>,
    permission: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  heartbeat(
    quoteAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _switchboard: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleQueueSettings(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { v3Enabled: boolean; serviceQueue: string }>;

  permissions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queueExists(
    queueAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queues(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      authority: string;
      maxSize: BigNumber;
      reward: BigNumber;
      lastHeartbeat: BigNumber;
      maxQuoteVerificationAge: BigNumber;
      allowAuthorityOverrideAfter: BigNumber;
      requireAuthorityHeartbeatPermission: boolean;
      requireUsagePermissions: boolean;
      enableContentHash: boolean;
      quoteTimeout: BigNumber;
      gcIdx: BigNumber;
      currIdx: BigNumber;
    }
  >;

  quoteAuthorityToQuoteAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  quoteExists(
    quoteAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  quotes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      string
    ] & {
      queueAddress: string;
      authority: string;
      quoteBuffer: string;
      verificationStatus: number;
      verificationTimestamp: BigNumber;
      validUntil: BigNumber;
      numRows: number;
      lastHeartbeat: BigNumber;
      owner: string;
    }
  >;

  removeMrEnclave(
    queueAddress: PromiseOrValue<string>,
    mrEnclave: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reverify(
    quoteAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPermission(
    granter: PromiseOrValue<string>,
    grantee: PromiseOrValue<string>,
    permission: PromiseOrValue<BigNumberish>,
    on: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQueueConfig(
    _queueAddress: PromiseOrValue<string>,
    _authority: PromiseOrValue<string>,
    _maxSize: PromiseOrValue<BigNumberish>,
    _reward: PromiseOrValue<BigNumberish>,
    _quoteTimeout: PromiseOrValue<BigNumberish>,
    _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
    _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
    _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
    _requireUsagePermissions: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchboard(overrides?: CallOverrides): Promise<string>;

  updateQuote(
    _authority: PromiseOrValue<string>,
    _queueAddress: PromiseOrValue<string>,
    _quoteBuffer: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validate(
    _authority: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyQuote(
    verifierAddress: PromiseOrValue<string>,
    quoteAddress: PromiseOrValue<string>,
    quoteIdx: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    HEARTBEAT_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    SERVICE_QUEUE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    USAGE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    addMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createServiceQueue(
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _quoteTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      _enableContentHash: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    failQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceOverrideVerify(
      _queue: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    generateAddress(overrides?: CallOverrides): Promise<string>;

    getQuoteIdx(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    heartbeat(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _switchboard: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleQueueSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { v3Enabled: boolean; serviceQueue: string }
    >;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        authority: string;
        maxSize: BigNumber;
        reward: BigNumber;
        lastHeartbeat: BigNumber;
        maxQuoteVerificationAge: BigNumber;
        allowAuthorityOverrideAfter: BigNumber;
        requireAuthorityHeartbeatPermission: boolean;
        requireUsagePermissions: boolean;
        enableContentHash: boolean;
        quoteTimeout: BigNumber;
        gcIdx: BigNumber;
        currIdx: BigNumber;
      }
    >;

    quoteAuthorityToQuoteAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    quoteExists(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    quotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        string
      ] & {
        queueAddress: string;
        authority: string;
        quoteBuffer: string;
        verificationStatus: number;
        verificationTimestamp: BigNumber;
        validUntil: BigNumber;
        numRows: number;
        lastHeartbeat: BigNumber;
        owner: string;
      }
    >;

    removeMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    reverify(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _quoteTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    switchboard(overrides?: CallOverrides): Promise<string>;

    updateQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validate(
      _authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "QuoteAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): QuoteAccountInitEventFilter;
    QuoteAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): QuoteAccountInitEventFilter;

    "QuoteGC(address,address)"(
      quoteAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): QuoteGCEventFilter;
    QuoteGC(
      quoteAddress?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): QuoteGCEventFilter;

    "QuoteHeartbeat(address,address)"(
      quoteAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): QuoteHeartbeatEventFilter;
    QuoteHeartbeat(
      quoteAddress?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): QuoteHeartbeatEventFilter;

    "QuotePayoutEvent(address,uint256)"(
      quoteAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): QuotePayoutEventEventFilter;
    QuotePayoutEvent(
      quoteAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): QuotePayoutEventEventFilter;

    "QuoteVerifyRequest(address,address,address)"(
      queueAddress?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;
    QuoteVerifyRequest(
      queueAddress?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;

    "ServiceQueueAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): ServiceQueueAccountInitEventFilter;
    ServiceQueueAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): ServiceQueueAccountInitEventFilter;
  };

  estimateGas: {
    HEARTBEAT_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    SERVICE_QUEUE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    USAGE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    addMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createServiceQueue(
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _quoteTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      _enableContentHash: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    failQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceOverrideVerify(
      _queue: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getQuoteIdx(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heartbeat(
      quoteAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _switchboard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleQueueSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteAuthorityToQuoteAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteExists(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reverify(
      quoteAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _quoteTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchboard(overrides?: CallOverrides): Promise<BigNumber>;

    updateQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validate(
      _authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    HEARTBEAT_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SERVICE_QUEUE_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USAGE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createServiceQueue(
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _quoteTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      _enableContentHash: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    failQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceOverrideVerify(
      _queue: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getQuoteIdx(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heartbeat(
      quoteAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _switchboard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleQueueSettings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueExists(
      queueAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteAuthorityToQuoteAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteExists(
      quoteAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMrEnclave(
      queueAddress: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reverify(
      quoteAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPermission(
      granter: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQueueConfig(
      _queueAddress: PromiseOrValue<string>,
      _authority: PromiseOrValue<string>,
      _maxSize: PromiseOrValue<BigNumberish>,
      _reward: PromiseOrValue<BigNumberish>,
      _quoteTimeout: PromiseOrValue<BigNumberish>,
      _maxQuoteVerificationAge: PromiseOrValue<BigNumberish>,
      _allowAuthorityOverrideAfter: PromiseOrValue<BigNumberish>,
      _requireAuthorityHeartbeatPermission: PromiseOrValue<boolean>,
      _requireUsagePermissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchboard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateQuote(
      _authority: PromiseOrValue<string>,
      _queueAddress: PromiseOrValue<string>,
      _quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      _authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyQuote(
      verifierAddress: PromiseOrValue<string>,
      quoteAddress: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
